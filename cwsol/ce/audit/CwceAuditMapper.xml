<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="egovframework.cas.cwsol.ce.audit.serviceimpl.CwceAuditMapper">
	
	<!-- RCM MAP  -->
    <resultMap id="rcmSttusMap" type="EgovMap" >
        <result property="objectId"             column="OBJECT_ID"          />
        <result property="objectKndCdId"        column="OBJECT_KND_CD_ID"   />
        <result property="megaId"               column="MEGA_ID"            />
        <result property="megaNo"               column="MEGA_NO"            />
        <result property="megaNm"               column="MEGA_NM"            />
        <result property="mjrId"                column="MJR_ID"             />
        <result property="mjrNo"                column="MJR_NO"             />
        <result property="mjrNm"                column="MJR_NM"             />
        <result property="subId"                column="SUB_ID"             />
        <result property="subNo"                column="SUB_NO"             />
        <result property="subNm"                column="SUB_NM"             />
        <result property="riskId"               column="RISK_ID"            />
        <result property="cnrlId"               column="CNRL_ID"            />
        <result property="cnrlNo"               column="CNRL_NO"            />
        <result property="cnrlCn"               column="CNRL_CN"            />
        <result property="refNo"                column="REF_NO"             />
        <result property="keyCnrlAt"            column="KEY_CNRL_AT"        />
        <result property="controlCheckAt"       column="CONTROL_CHECK_AT"   />
        <result property="evlId"                column="EVL_ID"             />
        <result property="chrgUserId"           column="CHRG_USER_ID"       />
        <result property="chrgUserBgnde"        column="CHRG_USER_BGNDE"    />
        <result property="chrgDeptId"           column="CHRG_DEPT_ID"       />
        <result property="chrgDeptBgnde"        column="CHRG_DEPT_BGNDE"    />
        <result property="chrgUserNm"           column="CHRG_USER_NM"       />
        <result property="chrgDeptNm"           column="CHRG_DEPT_NM"       />
        <result property="chrgSttusCdId"        column="CHRG_STTUS_CD_ID"   />
        <result property="chrgSttusCdNm"        column="CHRG_STTUS_CD_NM"   />
        <result property="srchKeyCnrlAt"        column="SRCH_KEY_CNRL_AT"   />
        <result property="srchUpdtAt"           column="SRCH_UPDT_AT"   />
        <result property="srchUprpdAt"          column="SRCH_UPRPD_AT"  />
        <result property="srchSttusCdId"        column="SRCH_STTUS_CD_ID"   />
        <collection property="typeList"         column="{evlId=EVL_ID,objectId=OBJECT_ID}" select="selectTestUserList" />
    </resultMap>
    
    <!-- 감사수행 목록 -->
	<select id="list" resultType="EgovMap">
		SELECT    A.EVL_ID
                , A.EVL_TY_CD_ID
                , C1.CODE_NM AS EVL_TY_CD_NM
                , A.EVL_KND_CD_ID
                , C2.CODE_NM AS EVL_KND_CD_NM
                , A.EVL_SJ
                , A.ACCNUT_YY
                , A.ACCNUT_SE_CD_ID
                , C3.CODE_NM AS ACCNUT_SE_CD_NM
                , CONVERT ( VARCHAR , CONVERT ( DATE , A.EVL_BGNDE , 112 ) , 23 ) AS EVL_BGNDE
                , CONVERT ( VARCHAR , CONVERT ( DATE , A.EVL_ENDDE , 112 ) , 23 ) AS EVL_ENDDE
                , A.EVL_CN
                , A.EVL_FUTR_PLAN
                , A.STTUS_CD_ID
                , C4.CODE_NM AS STTUS_CD_NM
                , A.SANCTN_ID 
                , A.UNITY_ID 
                , B.AUDIT_LAST_OPINION
                , B.STTUS_CD_ID                 AS AUDIT_STTUS_CD_ID
                , C5.CODE_NM                    AS AUDIT_STTUS_CD_NM
                , B.UNITY_ID                    AS AUDIT_UNITY_ID 
                , B.RGS_DT
                , B.RGS_USER_ID
                , B.UPD_DT
                , B.UPD_USER_ID
                , (	SELECT (CASE WHEN COUNT(U.OBJECT_ID) = 0 THEN 'N' ELSE 'Y' END) 
                	FROM TB_CW_UPRPD U 
                	LEFT OUTER JOIN TB_CW_UPRPD_EXC UE
                		ON 	U.EVL_ID = UE.EVL_ID
                		AND U.OBJECT_ID = UE.OBJECT_ID
                	WHERE 	U.EVL_ID = A.EVL_ID
                		AND	UE.OBJECT_ID IS NOT NULL
                		AND	U.UPRPD_CL_CD_ID = 'CTW_202_001')	AS FRGLTY_AT	--취약점 존재여부
        FROM TB_CW_EVL A
            LEFT OUTER JOIN TB_CW_EVL_AUDIT B
                ON A.EVL_ID = B.EVL_ID
            LEFT OUTER JOIN TB_CO_CODE C1
                ON A.EVL_TY_CD_ID = C1.CODE_ID
            LEFT OUTER JOIN TB_CO_CODE C2
                ON A.EVL_KND_CD_ID = C2.CODE_ID
            LEFT OUTER JOIN TB_CO_CODE C3
                ON A.ACCNUT_SE_CD_ID = C3.CODE_ID
            LEFT OUTER JOIN TB_CO_CODE C4
                ON A.STTUS_CD_ID = C4.CODE_ID
            LEFT OUTER JOIN TB_CO_CODE C5
                ON B.STTUS_CD_ID = C5.CODE_ID
        <trim prefix="WHERE" prefixOverrides="AND|OR ">
            AND A.STTUS_CD_ID IN ('CTW_101_005', 'CTW_101_006')
            <if test=' srchBgnde != null and srchBgnde != "" '>
                <![CDATA[  AND A.EVL_BGNDE >= REPLACE(#{srchBgnde},'-','')  ]]>
            </if>
            <if test=' srchEndde != null and srchEndde != "" '>
                <![CDATA[  AND A.EVL_ENDDE <= REPLACE(#{srchEndde},'-','')  ]]>
            </if>
            <if test=' srchAccnutYy != null and srchAccnutYy != "" '>
                AND A.ACCNUT_YY = #{srchAccnutYy}
            </if>
            <if test=' srchAccnutSeCdId != null and srchAccnutSeCdId != "" '>
                AND A.ACCNUT_SE_CD_ID = #{srchAccnutSeCdId}
            </if>
            <if test=' srchEvlTyCdId != null and srchEvlTyCdId != "" '>
                AND A.EVL_TY_CD_ID = #{srchEvlTyCdId}
            </if>
            <if test=' srchEvlKndCdId != null and srchEvlKndCdId != "" '>
                AND A.EVL_KND_CD_ID = #{srchEvlKndCdId}
            </if>
            <if test=' srchSttusCdId != null and srchSttusCdId != "" '>
                AND A.STTUS_CD_ID = #{srchSttusCdId}
            </if>
            <if test=' srchAuditSttusCdId != null and srchAuditSttusCdId != "" '>
                AND B.STTUS_CD_ID = #{srchAuditSttusCdId}
            </if>
            <if test=' srchWrd != null and srchWrd != "" '>
                <choose>
                    <when test="srchTy == 'sj'" >           AND UPPER(A.EVL_SJ) LIKE '%' + UPPER(#{srchWrd}) + '%'            </when>
                    <when test="srchTy == 'cn'" >           AND UPPER(A.EVL_CN) LIKE '%' + UPPER(#{srchWrd}) + '%'            </when>
                </choose>
            </if>
            <if test=' srchUseAt == "Y" '>
                AND A.STTUS_CD_ID = 'CTW_101_006'
                AND B.STTUS_CD_ID = 'CTW_117_002'
            </if>
         </trim>
         ORDER BY A.EVL_ID DESC
	</select>
	
	<!-- 감사수행 상세 -->
	<select id="view" resultType="CwceAuditVO">
		SELECT    A.EVL_ID 
				, A.EVL_TY_CD_ID 
				, C1.CODE_NM 		AS EVL_TY_CD_NM
				, A.EVL_KND_CD_ID 
				, C2.CODE_NM 		AS EVL_KND_CD_NM
				, A.EVL_SJ 
				, A.ACCNUT_YY 
				, A.ACCNUT_SE_CD_ID 
				, C3.CODE_NM 		AS ACCNUT_SE_CD_NM
				, CONVERT ( VARCHAR , CONVERT ( DATE , A.EVL_BGNDE , 112 ) , 23 ) AS EVL_BGNDE 
				, CONVERT ( VARCHAR , CONVERT ( DATE , A.EVL_ENDDE , 112 ) , 23 ) AS EVL_ENDDE 
				, A.EVL_CN 
				, A.EVL_FUTR_PLAN 
				, A.STTUS_CD_ID 
				, C4.CODE_NM 		AS STTUS_CD_NM
				, A.SANCTN_ID 
				, A.UNITY_ID 
				, A.RGS_DT 
				, A.RGS_USER_ID 
				, A.UPD_DT 
				, A.UPD_USER_ID 
				, 'sttus'							AS SRCH_PAGE
				, B.AUDIT_LAST_OPINION
				, B.STTUS_CD_ID         AS AUDIT_STTUS_CD_ID
				, C5.CODE_NM                    AS AUDIT_STTUS_CD_NM
				, B.UNITY_ID						AS AUDIT_UNITY_ID
				, CONVERT ( VARCHAR , B.UPD_DT , 23 ) + ' ' + CONVERT ( VARCHAR , B.UPD_DT , 8) AS AUIDT_UPD_DT 
				, UB.USER_NM 						AS AUDIT_USER_NM
				, UB.DEPT_NM 						AS AUDIT_DEPT_NM
				, #{srchKeyCnrlAt}					AS SRCH_KEY_CNRL_AT
				, #{srchUpdtAt}						AS SRCH_UPDT_AT
				, #{srchUprpdAt}					AS SRCH_UPRPD_AT
		FROM TB_CW_EVL A
			LEFT OUTER JOIN TB_CW_EVL_AUDIT B
                ON A.EVL_ID = B.EVL_ID
			LEFT OUTER JOIN TB_CO_CODE C1
				ON A.EVL_TY_CD_ID = C1.CODE_ID
			LEFT OUTER JOIN TB_CO_CODE C2
				ON A.EVL_KND_CD_ID = C2.CODE_ID
			LEFT OUTER JOIN TB_CO_CODE C3
				ON A.ACCNUT_SE_CD_ID = C3.CODE_ID
			LEFT OUTER JOIN TB_CO_CODE C4
				ON A.STTUS_CD_ID = C4.CODE_ID
			LEFT OUTER JOIN TB_CO_CODE C5
                ON B.STTUS_CD_ID = C5.CODE_ID
			LEFT OUTER JOIN TB_CO_USER_HIST UB
				ON B.UPD_USER_ID = UB.USER_ID
				AND UB.HIST_ENDDE = '99991231'
		WHERE A.EVL_ID = #{evlId}
	</select>
	
	<!-- 감사수행 저장 -->
	<insert id="save">
		MERGE INTO TB_CW_EVL_AUDIT A
        USING (VALUES (1)) AS Source (Number)  ON ( A.EVL_ID  = #{evlId} )
        WHEN MATCHED THEN
            UPDATE SET  
                AUDIT_LAST_OPINION  = #{auditLastOpinion}
              , STTUS_CD_ID         = #{auditSttusCdId}
              , UNITY_ID            = #{auditUnityId}
              , UPD_DT              = GETDATE()
              , UPD_USER_ID         = #{suserId}
        WHEN NOT MATCHED THEN
            INSERT (
                EVL_ID, AUDIT_LAST_OPINION, STTUS_CD_ID, UNITY_ID, RGS_DT, RGS_USER_ID, UPD_DT, UPD_USER_ID
            ) VALUES  (
                #{evlId}, #{auditLastOpinion}, #{auditSttusCdId}, #{auditUnityId}, GETDATE(), #{suserId}, GETDATE(), #{suserId} 
            )
	</insert>	
	
    <!-- 평가수행 목록 -->
    <select id="rcmList" resultMap="rcmSttusMap">
		SELECT T.OBJECT_ID
		      , T.OBJECT_NO
		      , T.OBJECT_NM
		      , T.OBJECT_LEVEL
		      , T.OBJECT_KND_CD_ID
		      , T.UPPER_OBJECT_ID
		      , T.EVL_ID
		      , EC.CNRL_NO
		      , EC.CNRL_CN
		      , EC.OFFICE_TY_CD_ID
		      , EC.KEY_CNRL_AT
		      , EC.REFRN_NO
		      , E.CHRG_USER_TY_CD_ID
		      , E.CHRG_USER_ID
		      , E.CHRG_USER_BGNDE
		      , E.CHRG_DEPT_ID
		      , E.CHRG_DEPT_BGNDE
		      , U.USER_NM                   AS CHRG_USER_NM
		      , D.DEPT_NM                   AS CHRG_DEPT_NM
		      , E.STTUS_CD_ID               AS CHRG_STTUS_CD_ID
		      , C1.CODE_NM                  AS CHRG_STTUS_CD_NM
		      , E.EVL_CNCLSN_CD_ID
		      , C2.CODE_NM              AS EVL_CNCLSN_CD_NM
		      , ( CASE WHEN P.OBJECT_ID IS NOT NULL THEN 'Y'
		               ELSE 'N'
		          END )                        AS UPRPD_REQUST_AT
		      , PE.STTUS_CD_ID      AS UPRPD_STTUS_CD_ID
		      , C3.CODE_NM          AS UPRPD_STTUS_CD_NM
		      , CASE WHEN T.OBJECT_KND_CD_ID = 'CTW_001_001' THEN 'mega'
		             WHEN T.OBJECT_KND_CD_ID = 'CTW_001_002' THEN 'mjr'
		             WHEN T.OBJECT_KND_CD_ID = 'CTW_001_003' THEN 'sub'
		             WHEN T.OBJECT_KND_CD_ID = 'CTW_001_005' THEN 'cnrl'
		        END AS SRCH_PAGE
		      , AUD.AUDIT_OPINION   AS AUDIT_OPINION
		      , AUD.STTUS_CD_ID     AS AUDIT_STTUS_CD_ID
		      , C4.CODE_NM     AS AUDIT_STTUS_CD_NM
		FROM (  /** RCM Mapng Tree 구조 */
		        SELECT A.EVL_ID
		               , A.OBJECT_ID
		               , A.OBJECT_NO
		               , A.OBJECT_NM
		               , A.OBJECT_LEVEL
		               , A.OBJECT_KND_CD_ID
		               , (CASE WHEN A.OBJECT_KND_CD_ID = 'CTW_001_005' THEN B.UPPER_OBJECT_ID ELSE A.UPPER_OBJECT_ID END) AS UPPER_OBJECT_ID
		        FROM TB_CW_EVL_RCM_MAPNG A
		        LEFT OUTER JOIN TB_CW_EVL_RCM_MAPNG B
		            ON A.EVL_ID = B.EVL_ID
		            AND A.UPPER_OBJECT_ID = B.OBJECT_ID
		        WHERE A.EVL_ID = #{evlId}
		            AND A.OBJECT_KND_CD_ID != 'CTW_001_004'
		        ) T
			LEFT OUTER JOIN TB_CW_EVL_EXC E
			    ON  T.EVL_ID                = E.EVL_ID
			    AND T.OBJECT_ID             = E.OBJECT_ID
			    AND E.CHRG_USER_TY_CD_ID    = 'CTW_105_001'
			LEFT OUTER JOIN TB_CW_EVL_RCM_PROCS EP
			    ON  E.EVL_ID                = EP.EVL_ID
			    AND T.OBJECT_ID             = EP.PROCS_ID
			LEFT OUTER JOIN TB_CW_EVL_RCM_RISK ER
			    ON  E.EVL_ID                = ER.EVL_ID
			    AND T.OBJECT_ID             = ER.RISK_ID
			LEFT OUTER JOIN TB_CW_EVL_RCM_CNRL EC
			    ON  E.EVL_ID                = EC.EVL_ID
			    AND T.OBJECT_ID             = EC.CNRL_ID
			LEFT OUTER JOIN TB_CW_UPRPD_CNRL_UPDT ECU
			    ON  E.EVL_ID                = ECU.EVL_ID
			    AND T.OBJECT_ID             = ECU.CNRL_ID
			LEFT OUTER JOIN TB_CW_UPRPD P
			    ON  E.EVL_ID                = P.EVL_ID
			    AND E.OBJECT_ID             = P.OBJECT_ID
			    AND E.CHRG_USER_ID             = P.CHRG_USER_ID
			    AND E.CHRG_USER_TY_CD_ID             = P.CHRG_USER_TY_CD_ID
			LEFT OUTER JOIN TB_CW_UPRPD_EXC PE
			    ON  E.EVL_ID                = PE.EVL_ID
			    AND E.OBJECT_ID             = PE.OBJECT_ID                        
			LEFT OUTER JOIN TB_CO_USER_HIST U
			    ON  E.CHRG_USER_ID          = U.USER_ID
			    AND E.CHRG_USER_BGNDE       = U.HIST_BGNDE
			LEFT OUTER JOIN TB_CO_DEPT_HIST D
			    ON  E.CHRG_DEPT_ID          = D.DEPT_ID
			    AND E.CHRG_DEPT_BGNDE       = D.HIST_BGNDE
			LEFT OUTER JOIN TB_CO_CODE C1
			    ON  E.STTUS_CD_ID           = C1.CODE_ID
			LEFT OUTER JOIN TB_CO_CODE C2
			    ON  E.EVL_CNCLSN_CD_ID           = C2.CODE_ID
			LEFT OUTER JOIN TB_CO_CODE C3
			    ON  PE.STTUS_CD_ID           = C3.CODE_ID
			 LEFT OUTER JOIN TB_CW_EVL_AUDIT_OPINION AUD
			    ON E.EVL_ID                = AUD.EVL_ID
			    AND E.OBJECT_ID             = AUD.OBJECT_ID            
			    AND E.CHRG_USER_ID          = AUD.CHRG_USER_ID
			    AND E.CHRG_USER_TY_CD_ID    = AUD.CHRG_USER_TY_CD_ID
			LEFT OUTER JOIN TB_CO_CODE C4
			    ON  AUD.STTUS_CD_ID           = C4.CODE_ID
			    
		<trim prefix="WHERE" prefixOverrides="AND|OR ">
		    AND 1=1
		    /** 핵심통제여부 */
		    <if test=' srchKeyCnrlAt == "Y"'>
		        AND (T.OBJECT_KND_CD_ID != 'CTW_001_005' OR (T.OBJECT_KND_CD_ID = 'CTW_001_005' AND EC.KEY_CNRL_AT = 'Y'))
		    </if>
		    <if test=' srchKeyCnrlAt == "N"'>
		        AND (T.OBJECT_KND_CD_ID != 'CTW_001_005' OR (T.OBJECT_KND_CD_ID = 'CTW_001_005' AND EC.KEY_CNRL_AT = 'N'))
		    </if>
		    <if test=' srchKeyCnrlAt == "NULL"'>
		        AND (T.OBJECT_KND_CD_ID != 'CTW_001_005' OR (T.OBJECT_KND_CD_ID = 'CTW_001_005' AND EC.KEY_CNRL_AT IS NULL))
		    </if>
		    /** 효과성 평가 */
		    <if test=' srchEvlCnclsnCdId != null and srchEvlCnclsnCdId != "" '>
		        AND (T.OBJECT_KND_CD_ID != 'CTW_001_005' OR (E.EVL_CNCLSN_CD_ID = #{srchEvlCnclsnCdId}))
		    </if>
		    /** 조직형 부서별 검색 - 선택한 부서와 통제만 출력 */
		    <if test=' srchDeptId != null and srchDeptId != "" '>
			    AND E.CHRG_DEPT_ID			= #{srchDeptId}
			    AND T.OBJECT_KND_CD_ID = 'CTW_001_005'
			</if>
		</trim>
		ORDER BY T.OBJECT_ID
    </select>
    
    <!-- 평가수행 테스트 사용자 조회 -->
    <select id="selectTestUserList" resultType="EgovMap">
        SELECT    ET.EVL_ID
                , ET.OBJECT_ID
                , ET.CHRG_USER_TY_CD_ID
                , ET.CHRG_USER_ID               AS TEST_USER_ID
                , ET.CHRG_USER_BGNDE            AS TEST_USER_BGNDE
                , ET.CHRG_DEPT_ID               AS TEST_DEPT_ID
                , ET.CHRG_DEPT_BGNDE            AS TEST_DEPT_BGNDE
                , ET.EVL_OPINION                AS TEST_OPINION
                , UT.USER_NM                    AS TEST_USER_NM
                , DT.DEPT_NM                    AS TEST_DEPT_NM
                , ET.STTUS_CD_ID                AS TEST_STTUS_CD_ID
                , C2.CODE_NM                    AS TEST_STTUS_CD_NM
                , AUD.AUDIT_OPINION AS TEST_AUDIT_OPINION
                , AUD.STTUS_CD_ID   AS TEST_AUDIT_STTUS_CD_ID
                , C3.CODE_NM   AS TEST_AUDIT_STTUS_CD_NM
                , 'test' AS SRCH_PAGE
        FROM TB_CW_EVL_EXC ET
            LEFT OUTER JOIN TB_CO_USER_HIST UT
                ON  ET.CHRG_USER_ID     = UT.USER_ID
                AND ET.CHRG_USER_BGNDE  = UT.HIST_BGNDE
            LEFT OUTER JOIN TB_CO_DEPT_HIST DT
                ON  ET.CHRG_DEPT_ID     = DT.DEPT_ID
                AND ET.CHRG_DEPT_BGNDE  = DT.HIST_BGNDE
            LEFT OUTER JOIN TB_CO_CODE C2
                ON ET.STTUS_CD_ID       = C2.CODE_ID
            LEFT OUTER JOIN TB_CW_EVL_AUDIT_OPINION AUD
                ON ET.EVL_ID                = AUD.EVL_ID
                AND ET.OBJECT_ID             = AUD.OBJECT_ID            
                AND ET.CHRG_USER_ID          = AUD.CHRG_USER_ID
                AND ET.CHRG_USER_TY_CD_ID    = AUD.CHRG_USER_TY_CD_ID
            LEFT OUTER JOIN TB_CO_CODE C3
                ON AUD.STTUS_CD_ID       = C3.CODE_ID
        WHERE   ET.EVL_ID               = #{evlId}
            AND ET.OBJECT_ID            = #{objectId}
            AND ET.CHRG_USER_TY_CD_ID   = 'CTW_105_002'
    </select>
    
    <!-- 감사의견 상세조회 -->
    <select id="auditOpinoinView" resultType="CwceAuditVO">
        SELECT    EVL.EVL_ID 
                , EVL.EVL_KND_CD_ID
                , EXC.OBJECT_ID
                , #{objectKndCdId}                  AS OBJECT_KND_CD_ID
                , #{srchPage}                       AS SRCH_PAGE
                , EXC.CHRG_USER_ID
                , EXC.CHRG_USER_TY_CD_ID
                , AUD.AUDIT_OPINION
                , AUD.STTUS_CD_ID
                , CD1.CODE_NM                       AS STTUS_CD_NM
                , AUD.UNITY_ID
                , CONVERT ( VARCHAR , AUD.UPD_DT , 23 ) + ' ' + CONVERT ( VARCHAR , AUD.UPD_DT , 8) AS AUIDT_UPD_DT 
                , UB.USER_NM                        AS AUDIT_USER_NM
                , UB.DEPT_NM                        AS AUDIT_DEPT_NM
        FROM TB_CW_EVL EVL
            INNER JOIN TB_CW_EVL_EXC EXC
               ON EVL.EVL_ID               = EXC.EVL_ID
             LEFT OUTER JOIN TB_CW_EVL_AUDIT_OPINION AUD
               ON EXC.EVL_ID               = AUD.EVL_ID
              AND EXC.OBJECT_ID           = AUD.OBJECT_ID
              AND EXC.CHRG_USER_ID        = AUD.CHRG_USER_ID
              AND EXC.CHRG_USER_TY_CD_ID  = AUD.CHRG_USER_TY_CD_ID
             LEFT OUTER JOIN TB_CO_CODE CD1
               ON AUD.STTUS_CD_ID = CD1.CODE_ID
             LEFT OUTER JOIN TB_CO_USER_HIST UB
               ON AUD.UPD_USER_ID = UB.USER_ID
              AND UB.HIST_ENDDE = '99991231'
        WHERE EVL.EVL_ID = #{evlId}
          AND EXC.OBJECT_ID = #{objectId}
          AND EXC.CHRG_USER_ID = #{chrgUserId}
          AND EXC.CHRG_USER_TY_CD_ID = #{chrgUserTyCdId}
    </select>    
    
    <!-- 감사의견 저장 -->
    <insert id="opinionSave">
        MERGE INTO TB_CW_EVL_AUDIT_OPINION A
        USING (VALUES (1)) AS Source (Number)  ON ( A.EVL_ID               = #{evlId}
                          AND A.OBJECT_ID            = #{objectId}
                          AND A.CHRG_USER_ID         = #{chrgUserId}
                          AND A.CHRG_USER_TY_CD_ID   = #{chrgUserTyCdId} )
        WHEN MATCHED THEN
            UPDATE SET  
                AUDIT_OPINION  = #{auditOpinion}
              , STTUS_CD_ID         = #{sttusCdId}
              , UNITY_ID            = #{unityId}
              , UPD_DT              = GETDATE()
              , UPD_USER_ID         = #{suserId}
        WHEN NOT MATCHED THEN
            INSERT (
                EVL_ID, OBJECT_ID, CHRG_USER_ID, CHRG_USER_TY_CD_ID, AUDIT_OPINION, STTUS_CD_ID, UNITY_ID, RGS_DT, RGS_USER_ID, UPD_DT, UPD_USER_ID
            ) VALUES  (
                #{evlId}, #{objectId}, #{chrgUserId}, #{chrgUserTyCdId}, #{auditOpinion}, #{sttusCdId}, #{unityId}, GETDATE(), #{suserId}, GETDATE(), #{suserId} 
            )
    </insert>   
    

    <select id="opinionList" resultMap="rcmSttusMap">
        SELECT T.OBJECT_ID
			 , T.OBJECT_NO
			 , T.OBJECT_NM
			 , T.OBJECT_LEVEL
			 , T.OBJECT_KND_CD_ID
			 , T.UPPER_OBJECT_ID
			 , T.EVL_ID
			 , EC.CNRL_NO
			 , EC.CNRL_CN
			 , EC.OFFICE_TY_CD_ID
			 , EC.KEY_CNRL_AT
			 , EC.MRC_CNRL_AT
			 , EC.IPE_CNRL_AT
			 , EC.REFRN_NO
			 , E.CHRG_USER_ID
			 , E.CHRG_USER_BGNDE
			 , E.CHRG_DEPT_ID
			 , E.CHRG_DEPT_BGNDE
			 , (CASE WHEN EA.STTUS_CD_ID = 'CTW_117_002' THEN EA.AUDIT_OPINION ELSE '' END) AS EVL_OPINION		-- 평가에 대한 감사의견
			 , U.USER_NM                   AS CHRG_USER_NM
			 , D.DEPT_NM                   AS CHRG_DEPT_NM
			 , E.STTUS_CD_ID               AS CHRG_STTUS_CD_ID
			 , ISNULL(C1.CODE_NM, '대기')       AS CHRG_STTUS_CD_NM
			 , CASE WHEN ECU.CNRL_ID IS NOT NULL THEN 'Y'
			   END                         AS UPDT_AT
			 , CASE WHEN P.OBJECT_ID IS NOT NULL THEN 'Y'
			   END                         AS UPRPD_AT
		FROM (  /** RCM Mapng Tree 구조 */
				SELECT A.EVL_ID
				       , A.OBJECT_ID
				       , A.OBJECT_NO
				       , A.OBJECT_NM
				       , A.OBJECT_LEVEL
				       , A.OBJECT_KND_CD_ID
				       , (CASE WHEN A.OBJECT_KND_CD_ID = 'CTW_001_005' THEN B.UPPER_OBJECT_ID ELSE A.UPPER_OBJECT_ID END) AS UPPER_OBJECT_ID
				FROM TB_CW_EVL_RCM_MAPNG A
				LEFT OUTER JOIN TB_CW_EVL_RCM_MAPNG B
				    ON A.EVL_ID = B.EVL_ID
				    AND A.UPPER_OBJECT_ID = B.OBJECT_ID
				WHERE A.EVL_ID = #{evlId}
				    AND A.OBJECT_KND_CD_ID != 'CTW_001_004'
				) T
			LEFT OUTER JOIN TB_CW_EVL_EXC E
			    ON  T.EVL_ID                = E.EVL_ID
			    AND T.OBJECT_ID             = E.OBJECT_ID
			    AND E.CHRG_USER_TY_CD_ID    = 'CTW_105_001'
        	LEFT OUTER JOIN TB_CW_EVL_AUDIT_OPINION EA
        		ON 	E.EVL_ID 				= EA.EVL_ID
        		AND E.OBJECT_ID 			= EA.OBJECT_ID
        		AND E.CHRG_USER_ID     		= EA.CHRG_USER_ID
                AND E.CHRG_USER_TY_CD_ID  	= EA.CHRG_USER_TY_CD_ID
			LEFT OUTER JOIN TB_CW_EVL_RCM_PROCS EP
			    ON  E.EVL_ID                = EP.EVL_ID
			    AND T.OBJECT_ID             = EP.PROCS_ID
			LEFT OUTER JOIN TB_CW_EVL_RCM_RISK ER
			    ON  E.EVL_ID                = ER.EVL_ID
			    AND T.OBJECT_ID             = ER.RISK_ID
			LEFT OUTER JOIN TB_CW_EVL_RCM_CNRL EC
			    ON  E.EVL_ID                = EC.EVL_ID
			    AND T.OBJECT_ID             = EC.CNRL_ID
			LEFT OUTER JOIN TB_CW_UPRPD_CNRL_UPDT ECU
			    ON  E.EVL_ID                = ECU.EVL_ID
			    AND T.OBJECT_ID             = ECU.CNRL_ID
			LEFT OUTER JOIN TB_CW_UPRPD P
			    ON  E.EVL_ID                = P.EVL_ID
			    AND T.OBJECT_ID             = P.OBJECT_ID
			LEFT OUTER JOIN TB_CO_USER_HIST U
			    ON  E.CHRG_USER_ID          = U.USER_ID
			    AND E.CHRG_USER_BGNDE       = U.HIST_BGNDE
			LEFT OUTER JOIN TB_CO_DEPT_HIST D
			    ON  E.CHRG_DEPT_ID          = D.DEPT_ID
			    AND E.CHRG_DEPT_BGNDE       = D.HIST_BGNDE
			LEFT OUTER JOIN TB_CO_CODE C1
			    ON  E.STTUS_CD_ID           = C1.CODE_ID
		<trim prefix="WHERE" prefixOverrides="AND|OR ">
		    AND 1=1
		    /** 핵심통제여부 */
		    <if test=' srchKeyCnrlAt == "Y"'>
		        AND (T.OBJECT_KND_CD_ID != 'CTW_001_005' OR (T.OBJECT_KND_CD_ID = 'CTW_001_005' AND EC.KEY_CNRL_AT = 'Y'))
		    </if>
		    <if test=' srchKeyCnrlAt == "N"'>
		        AND (T.OBJECT_KND_CD_ID != 'CTW_001_005' OR (T.OBJECT_KND_CD_ID = 'CTW_001_005' AND EC.KEY_CNRL_AT = 'N'))
		    </if>
		    <if test=' srchKeyCnrlAt == "NULL"'>
		        AND (T.OBJECT_KND_CD_ID != 'CTW_001_005' OR (T.OBJECT_KND_CD_ID = 'CTW_001_005' AND EC.KEY_CNRL_AT IS NULL))
		    </if>
		    /** 설계평가 수정된 통제 */
		    <if test=' srchUpdtAt == "Y"'>
		        AND (T.OBJECT_KND_CD_ID != 'CTW_001_005' OR (T.OBJECT_KND_CD_ID = 'CTW_001_005' AND ECU.CNRL_ID IS NOT NULL))
		    </if>
		    /** 운영평가 비효과적(미비점 요청) 통제 */
		    <if test=' srchUprpdAt == "Y"'>
		        AND (T.OBJECT_KND_CD_ID != 'CTW_001_005' OR (T.OBJECT_KND_CD_ID = 'CTW_001_005' AND P.CNRL_ID IS NOT NULL))
		    </if>
		    /** 운영평가 효과적 통제 */
		    <if test=' srchUprpdAt == "N"'>
		        AND (T.OBJECT_KND_CD_ID != 'CTW_001_005' OR (T.OBJECT_KND_CD_ID = 'CTW_001_005' AND P.CNRL_ID IS NULL))
		    </if>
		</trim>
		ORDER BY T.OBJECT_ID
    </select>

</mapper>
